buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

description = 'Ballerina - Webhook Ballerina Generator'

def packageName = "webhook"
def packageOrg = "ballerinax"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def originalDependencies = ballerinaDependencyFile.text
def originalConfig = ballerinaConfigFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
}

configurations {
    externalJars
}

dependencies {
    externalJars(group: 'io.netty', name: 'netty-common', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-buffer', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-transport', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-resolver', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec-http', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-handler-proxy', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-codec-http2', version: "${nettyVersion}") {
        transitive = false
    }
    externalJars(group: 'io.netty', name: 'netty-tcnative-boringssl-static', version: "${nettyTcnativeVersion}") {
        transitive = false
    }
    externalJars(group: 'commons-pool.wso2', name: 'commons-pool', version: "${wso2CommonsPoolVersion}") {
        transitive = false
    }
    externalJars(group: 'org.wso2.orbit.org.yaml', name: 'snakeyaml', version: "${wso2SnakeYamlVersion}") {
        transitive = false
    }
    externalJars(group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: "${bouncycastleVersion}") {
        transitive = false
    }
    externalJars(group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: "${bouncycastleVersion}") {
        transitive = false
    }
    externalJars(group: 'org.wso2.carbon.metrics', name: 'org.wso2.carbon.metrics.core', version: "${wso2CarbonMetricsVersion}") {
        transitive = false
    }
    externalJars(group: 'org.ballerinalang', name: 'http-native', version: "${stdlibHttpVersion}") {
        transitive = false
    }
}

task updateTomlFiles {
    doLast {
        def stdlibDependentHttpVersion = stripBallerinaExtensionVersion(project.stdlibHttpVersion)
        def stdlibDependentMimeVersion = stripBallerinaExtensionVersion(project.stdlibMimeVersion)
        def stdlibDependentAuthVersion = stripBallerinaExtensionVersion(project.stdlibAuthVersion)
        def stdlibDependentCacheVersion = stripBallerinaExtensionVersion(project.stdlibCacheVersion)
        def stdlibDependentCryptoVersion = stripBallerinaExtensionVersion(project.stdlibCryptoVersion)
        def stdlibDependentUrlVersion = stripBallerinaExtensionVersion(project.stdlibUrlVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)
        def stdlibDependentTimeVersion = stripBallerinaExtensionVersion(project.stdlibTimeVersion)
        def stdlibDependentOsVersion = stripBallerinaExtensionVersion(project.stdlibOsVersion)
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentRegexVersion = stripBallerinaExtensionVersion(project.stdlibRegexVersion)
        def stdlibDependentUuidVersion = stripBallerinaExtensionVersion(project.stdlibUuidVersion)
        def stdlibDependentRandomVersion = stripBallerinaExtensionVersion(project.stdlibRandomVersion)
        def stdlibDependentWebsubVersion = stripBallerinaExtensionVersion(project.stdlibWebsubVersion)

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)

        // Dynamic version update of external dependencies
        newConfig = newConfig.replace("@netty.version@", project.nettyVersion)
        newConfig = newConfig.replace("@wso2commonspool.version@", project.wso2CommonsPoolVersion)
        newConfig = newConfig.replace("@wso2snakeyaml.version@", project.wso2SnakeYamlVersion)
        newConfig = newConfig.replace("@bouncycastle.version@", project.bouncycastleVersion)
        newConfig = newConfig.replace("@nettytcnative.version@", project.nettyTcnativeVersion)
        newConfig = newConfig.replace("@wso2carbonmetrics.version@", project.wso2CarbonMetricsVersion)
        newConfig = newConfig.replace("@http.native.version@", project.stdlibHttpVersion)
        ballerinaConfigFile.text = newConfig

        // Dynamic version update of stdlib dependencies
        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.mime.version@", stdlibDependentMimeVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.auth.version@", stdlibDependentAuthVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.cache.version@", stdlibDependentCacheVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.crypto.version@", stdlibDependentCryptoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.url.version@", stdlibDependentUrlVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.time.version@", stdlibDependentTimeVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.os.version@", stdlibDependentOsVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.regex.version@", stdlibDependentRegexVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.uuid.version@", stdlibDependentUuidVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.random.version@", stdlibDependentRandomVersion)
        newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.websub.version@", stdlibDependentWebsubVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFiles {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencies
    }
}

updateTomlFiles.dependsOn copyStdlibs

build.dependsOn ":${packageName}-native:build"
test.dependsOn ":${packageName}-native:build"

publishToMavenLocal.dependsOn build
publish.dependsOn build
